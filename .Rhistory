test2 <-grep("gene_id ([[:alpha:]]+)", test$V9, perl = T)
head(Test)
head(test2)
test2 <-grep("gene_id ([[:alpha:]]+)", test$V9)
head(test2)
ls()
install.packages("KernSmooth")
KernSmooth
library(KernSmooth)
# The first function, makeVector creates a special "vector", which is really a list containing a function to
# 1. set the value of the vector
# 2. get the value of the vector
# 3. set the value of the mean
# 4. get the value of the mean
makeVector <- function(x = numeric()) {
# m <- NULL sets mean value to NULL as a placeholder
m <- NULL
# defines a function to set the vector, x, to a new vector, y, and resets the mean, m, to NULL
set <- function(y) {
x <<- y
m <<- NULL
print("I'm in the set function")
}
# returns the vector, X
get <- function(){
x
}
# sets the mean, m to mean
setmean <- function(mean){
m <<- mean
}
getmean <- function() {
m
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector" created with the above function.
# However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cachemean <- function(x, ...) {
# x is a list of vectors passed from makeVector
# assign to m in cachemean, the value from getmean(m) that is NULL.
m <- x$getmean()
#If the mean stored under the parameters "vector x" is not NULL, return it.
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# assign to data the vector x
data <- x$get()
print(data)
# Calculate the mean and assign it to m
m <- mean(data, ...)
# Store the mean "m" under the parameters "vector x".
x$setmean(m)
# Return m
m
}
makeVector(1:10)
d <-makeVector(1:10)
cachemean(d)
# The first function, makeVector creates a special "vector", which is really a list containing a function to
# 1. set the value of the vector
# 2. get the value of the vector
# 3. set the value of the mean
# 4. get the value of the mean
makeVector <- function(x = numeric()) {
# m <- NULL sets mean value to NULL as a placeholder
m <- NULL
# defines a function to set the vector, x, to a new vector, y, and resets the mean, m, to NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# returns the vector, X
get <- function(){
x
}
# sets the mean, m to mean
setmean <- function(mean){
m <<- mean
}
getmean <- function() {
m
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector" created with the above function.
# However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cachemean <- function(x, ...) {
print(m)
# x is a list of vectors passed from makeVector
# assign to m in cachemean, the value from getmean(m) that is NULL.
m <- x$getmean()
#If the mean stored under the parameters "vector x" is not NULL, return it.
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# assign to data the vector x
data <- x$get()
print(data)
# Calculate the mean and assign it to m
m <- mean(data, ...)
# Store the mean "m" under the parameters "vector x".
x$setmean(m)
# Return m
m
}
d <-makeVector(1:10)
cachemean(d)
# The first function, makeVector creates a special "vector", which is really a list containing a function to
# 1. set the value of the vector
# 2. get the value of the vector
# 3. set the value of the mean
# 4. get the value of the mean
makeVector <- function(x = numeric()) {
# m <- NULL sets mean value to NULL as a placeholder
m <- NULL
# defines a function to set the vector, x, to a new vector, y, and resets the mean, m, to NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# returns the vector, X
get <- function(){
x
}
# sets the mean, m to mean
setmean <- function(mean){
m <<- mean
}
getmean <- function() {
m
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector" created with the above function.
# However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cachemean <- function(x, ...) {
# x is a list of vectors passed from makeVector
# assign to m in cachemean, the value from getmean(m) that is NULL.
m <- x$getmean()
print(m)
#If the mean stored under the parameters "vector x" is not NULL, return it.
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# assign to data the vector x
data <- x$get()
print(data)
# Calculate the mean and assign it to m
m <- mean(data, ...)
# Store the mean "m" under the parameters "vector x".
x$setmean(m)
# Return m
m
}
d <-makeVector(1:10)
cachemean(d)
cachemean(d)
# The first function, makeVector creates a special "vector", which is really a list containing a function to
# 1. set the value of the vector
# 2. get the value of the vector
# 3. set the value of the mean
# 4. get the value of the mean
makeVector <- function(x = numeric()) {
# m <- NULL sets mean value to NULL as a placeholder
m <- NULL
# defines a function to set the vector, x, to a new vector, y, and resets the mean, m, to NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# returns the vector, X
get <- function(){
x
}
# sets the mean, m to mean
setmean <- function(mean){
m <<- mean
}
getmean <- function() {
m
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector" created with the above function.
# However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cachemean <- function(x, ...) {
# x is a list of vectors passed from makeVector
# assign to m in cachemean, the value from getmean(m) that is NULL.
m <- x$getmean()
print(x)
#If the mean stored under the parameters "vector x" is not NULL, return it.
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# assign to data the vector x
data <- x$get()
print(data)
# Calculate the mean and assign it to m
m <- mean(data, ...)
# Store the mean "m" under the parameters "vector x".
x$setmean(m)
# Return m
m
}
d <-makeVector(1:10)
cachemean(d)
ls(environment(cachemean))
ls
ls()
ls(environment(makeVector))
ls(environment(makeVector$get))
y <- c(1,3,4,7,8)
x <- 1:100
mv <- makeVector(x)
mv$set(y)
cachemean(mv)
mv(get)
ls()
rm(x,y,mv)
# The first function, makeVector creates a special "vector", which is really a list containing a function to
# 1. set the value of the vector
# 2. get the value of the vector
# 3. set the value of the mean
# 4. get the value of the mean
makeVector <- function(x = numeric()) {
# m <- NULL sets mean value to NULL as a placeholder
m <- NULL
# defines a function to set the vector, x, to a new vector, y, and resets the mean, m, to NULL
set <- function(y) {
globalx <<- y
globalm <<- NULL
}
# returns the vector, X
get <- function(){
x
}
# sets the mean, m to mean
setmean <- function(mean){
globalm <<- mean
}
getmean <- function() {
m
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector" created with the above function.
# However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cachemean <- function(x, ...) {
# x is a list of vectors passed from makeVector
# assign to m in cachemean, the value from getmean(m) that is NULL.
m <- x$getmean()
print(globalx)
#If the mean stored under the parameters "vector x" is not NULL, return it.
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# assign to data the vector x
data <- x$get()
print(data)
# Calculate the mean and assign it to m
m <- mean(data, ...)
# Store the mean "m" under the parameters "vector x".
x$setmean(m)
# Return m
m
}
d <-makeVector(1:10)
cachemean(d)
d(get)
d$get())
d$get()
makeVector <- function(x = numeric()) {
# m <- NULL sets mean value to NULL as a placeholder
m <- NULL
# defines a function to set the vector, x, to a new vector, y, and resets the mean, m, to NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# returns the vector, X
get <- function(){
x
}
# sets the mean, m to mean
setmean <- function(mean){
globalm <<- mean
}
getmean <- function() {
m
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
d$get()
d$set()
cachemean(d)
# The first function, makeVector creates a special "vector", which is really a list containing a function to
# 1. set the value of the vector
# 2. get the value of the vector
# 3. set the value of the mean
# 4. get the value of the mean
makeVector <- function(x = numeric()) {
# m <- NULL sets mean value to NULL as a placeholder
m <- NULL
# defines a function to set the vector, x, to a new vector, y, and resets the mean, m, to NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# returns the vector, X
get <- function(){
x
}
# sets the mean, m to mean
setmean <- function(mean){
m <<- mean
}
getmean <- function() {
m
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector" created with the above function.
# However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cachemean <- function(x, ...) {
# x is a list of vectors passed from makeVector
# assign to m in cachemean, the value from getmean(m) that is NULL.
m <- x$getmean()
#If the mean stored under the parameters "vector x" is not NULL, return it.
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# assign to data the vector x
data <- x$get()
print(data)
# Calculate the mean and assign it to m
m <- mean(data, ...)
# Store the mean "m" under the parameters "vector x".
x$setmean(m)
# Return m
m
}
# The first function, makeVector creates a special "vector", which is really a list containing a function to
# 1. set the value of the vector
# 2. get the value of the vector
# 3. set the value of the mean
# 4. get the value of the mean
makeVector <- function(x = numeric()) {
# m <- NULL sets mean value to NULL as a placeholder
m <- NULL
# defines a function to set the vector, x, to a new vector, y, and resets the mean, m, to NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# returns the vector, X
get <- function(){
x
}
# sets the mean, m to mean
setmean <- function(mean){
m <<- mean
}
getmean <- function() {
m
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector" created with the above function.
# However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cachemean <- function(x, ...) {
# x is a list of vectors passed from makeVector
# assign to m in cachemean, the value from getmean(m) that is NULL.
m <- x$getmean()
#If the mean stored under the parameters "vector x" is not NULL, return it.
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# assign to data the vector x
data <- x$get()
print(data)
# Calculate the mean and assign it to m
m <- mean(data, ...)
# Store the mean "m" under the parameters "vector x".
x$setmean(m)
# Return m
m
}
d <-makeVector(1:10)
d$set()
cachemean(d)
d$set()
setwd("~/datasharing/ProgrammingAssignment2")
testmatrix <- matrix(1:9, 3)
testmatrix
solve(testmatrix)
testmatrix <- matrix(1:4, 2)
solve(testmatrix)
makeCacheMatrix <- function(x = matrix()) {
# inv <- NULL sets inverse value to NULL as a placeholder
inv <- NULL
# defines a function to set the matrix, x, to a new matrix, y, and resets the inverse, inv, to NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
# returns the matrix, x
get <- function(){
x
}
# sets the inverse, inv to inverse
setInv <- function(inverse){
inv <<- inverse
}
getInv <- function() {
inv
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
makeCacheMatrix(testmatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# inv <- NULL sets inverse value to NULL as a placeholder
inv <- NULL
# defines a function to set the matrix, x, to a new matrix, y, and resets the inverse, inv, to NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
# returns the matrix, x
get <- function(){
x
}
# sets the inverse, inv to inverse
setInv <- function(inverse){
inv <<- inverse
}
getInv <- function() {
inv
}
# returns the 'special vector' containing all of the functions just defined.
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
# x is a list of functions and the matrix from makeCacheMatrix
# assign to inv in cacheSolve, the value from getInv(inv)
inv <- x$getInv()
#If the mean stored under the parameters "vector x" is not NULL, return it.
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
# assign to data the vector x
data <- x$get()
print(data)
# Calculate the mean and assign it to m
inv <- solve(data, ...)
# Store the inverse under the parameters "vector x".
x$setInv(inv)
## Return a matrix that is the inverse of 'x'
inv
}
makeCacheMatrix(testmatrix)
d<-makeCacheMatrix(testmatrix)
cacheSolve(d)
cacheSolve(d)
